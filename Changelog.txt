= 0.11.0
  - fixed problems with linking to external CSS and JavaScript
  - introduced XHR serving by serveResource -- works only with Ajax.Updater

= 0.10.3
  - IE / CP1252 encoding hack
  - Support for parameters in the serveResource method

= 0.10.1
  - Changed the preferences route implementation. Requires gem caterpillar version 1.3.2.
  
= 0.10.0
  - Require gem caterpillar version 1.3.0
  - Rails286PortletRenderFilter became Rails286PortletFilter, to handle Render and Resource phases
  - support to resource phase (download files)
  - support to upload (multipart forms)

= 0.9.2
  - UID cookie + security key is now tested in real split-domain environment

= 0.9.1 (r372)
  - major upgrade: UID is now stored to cookie that is always sent to Rails, if the portlet
    is configured with the Rails secret key. Use Caterpillar 1.2.x to generate XML.
  - sessions should now be fully supported, please test
  - structural cleanup from tulios

= 0.8.1 (r315)
  - regression fixes

= 0.8.0 (r307)
  - move to full JSR286 compliance
  - preliminary session support
  - much cleaner structure; GET and POST have equal treatment
  - servlet cookie handling patches from Reinaldo Silva
  - OnlineClient now handles POST redirect loading,
    accept redirect on response 3xx, not just 302
  - portlet resets its route when the request parameter "railsRoute" is not set
  - some minor bug fixes
  - optimization by skipping debugging sections when not logging

= 0.7.3 (r274)
  - apply exit_portlet paramater checking for <form action> URLs,
	so that the POST request may be targeted outside the portlet container

= 0.7.2 (r245)
  - fix regression in RouteAnalyzer (since 0.7.1)
  - send cookies with request in GET after POST (but this does not fix the issue with session flash and POST)
  - renamed doView() to render() to comply JSR286
  - removed doEdit() and doHelp()
  - clean up the test cases

= 0.7.1 (r238)
  - optimized RouteAnalyzer; rewritten and tested route extraction function
  - overall code cleanup without intentional feature change
  - designed and implemented more test cases

= 0.7.0 (r206)
  - compiled with Liferay 5.2.3 libs
  - created a test framework with JUnit 4 - "make test" runs it
  - log4j can be configured for the testing environment
  - if input HTML is invalid, PageProcessor throws ParserException, doView catches
  - minor code cleanup
  - remove deprecated XML files
  - organized Makefiles

= 0.6.2
  - minor fix for URLs with an empty first parameter: "?&"

= 0.6.1
  - compatible with Liferay 5.2.0 - incompatible with Liferay 5.1.x due to Liferay API change

= 0.6.0
  - main function cleanup
  - added log4j xml configuration
  - disable cookies (since they didn't work properly)
  - fix to <head> inline JavaScript parsing, but HTMLparser cannot handle inline tags in inline JavaScript!
  - get Locale from portlet request and pass it to Rails
  - compatible with Liferay 5.1.1

= 0.5.2
  - %UID% path parameters is now being replaced by the user's ID or doAsUserId.

= 0.5.1
  - support for %GID% path parameter, which is replaced by the Liferay group the portlet is in.

= 0.5.0
  - refactored some POST-related functions. now link_to :method => post is supported.

= 0.4.2
  - cleaned useless imports.

= 0.4.1
  - fixed regressions from 0.4.0

= 0.4.0
  - changed the XML configuration. Now using three parameters: host, servlet and
    route. if the host is null, using the host from the HTTP request.
    useful with several virtualhosts on the same server.

= 0.3.1
  - fixed 'port -1' problem
  - fixed the 'you are being redirected' problem resulting from POST request redirect

= 0.3.0
  - extracts content-type and encoding from meta tags
  - keeps JavaScript and CSS 'src' tags intact, no more inline parsing

= 0.2.1
Released 29.7.2008
  - exit_portlet parameter

= 0.2.0
Released 1.7.2008
  - supports HTTP REFERER
  - sets the portlet title to the html page title
  - supports url parameters
  - does not change external links
  - session cookie works with Webrick

= 0.1.0
  - css and javascript parsing from external files, head and body sections.
  - css body tag is prefixed with portlet:namespace
  - POST method is supported from an external Rails server running on webrick,
    authentication problems with Rails in a WAR file
  - EDIT mode has baseUrl and requestPath parameters

= 0.0.4
  - Rails host, base and request url into the portlet.xml

= 0.0.3
  - Simple navigation with filtering works. The url is coded into the portlet by
    exchanging all "<a href..>" urls with PortletURL:

          PortletURL pu = response.createRenderURL();
          pu.setParameter("url",path);
          newUrl = new java.net.URL(pu.toString());

= 0.0.2
  - Simple Rails page (any web page, actually) loading and displaying works.

